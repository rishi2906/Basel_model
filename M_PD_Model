# Setting the work directory and extracting data
setwd("D:/CECL\\New_model")

library("data.table")
library(rlang)
library(Hmisc)
library(modeest)
library(forecast)
library(zoo)
library(tibble)
library(corrplot)
library(caret)
library(purrr)
library(ROCR)
library(grid)
library(broom)
library(tidyr)
library(dplyr)
library(scales)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(MASS)
library(car)
library(lmtest)
library(FitAR)
library(tseries)

#********Function to read origination file year by year*******************
origin_date=c()
origin_date[1]=as.numeric(readline("Enter origination date in yyyy:"))
f1=function(num_files){
  
  
  for(i in 2:num_files){
    
    
    origin_date[i] = origin_date[1] + (i-1)
  }
  return(origin_date)
}

#In this case origination year is from 1999 to 2009 so the number of year will be 11 
num_files = as.numeric(readline("enter number of years for origination in integer:"))

origin_date=f1(num_files)

origclass <- c('integer','integer','character', 'integer', 'character', 'real', 'integer',
               'character','real','integer','integer','integer','real','character','character','character','character',
               'character','character','character','character', 'integer', 'integer','character','character' ,'character')


origcolname=c('fico','dt_first_pi','flag_fthb','dt_matr','cd_msa',"mi_pct",'cnt_units','occpy_sts','cltv'
              ,'dti','orig_upb','ltv','int_rt','channel','ppmt_pnlty','prod_type','st', 'prop_type','zipcode','id_loan','loan_purpose',
              'orig_loan_term','cnt_borr','seller_name','servicer_name', 'flag_sc')

perfoclass <- c('character','integer','real','character', 'integer','integer','character','character',
                'character','integer','real','real','integer', 'integer', 'character','integer','integer',
                'integer','integer','integer','integer','real','real','character')


perfocolname=c('id_loan','svcg_cycle','current_upb','delq_sts','loan_age','mths_remng',
               'repch_flag','flag_mod', 'cd_zero_bal',
               'dt_zero_bal','current_int_rt','non_int_brng_upb','dt_lst_pi','mi_recoveries',
               'net_sale_proceeds','non_mi_recoveries','expenses', 'legal_costs',
               'maint_pres_costs','taxes_ins_costs','misc_costs','actual_loss', 'modcost','stepmod_ind')

a1 = Sys.time()
for(k in 1:num_files){
  
  #Reading Origination and performance file
  origfilename =paste("sample_orig_",origin_date[k],".txt",sep="")
  perfofilename =paste("sample_svcg_",origin_date[k],".txt",sep="")
  origfile = fread(origfilename, header=FALSE,sep="|",colClasses = origclass)
  perfofile = fread(perfofilename, header=FALSE,sep="|")
  names(origfile)=origcolname
  names(perfofile)=perfocolname
  
  
  #Merging perfomance and origination file 
  final_data = merge(origfile,perfofile,by="id_loan")
  final_data$svcg_cycle <- as.Date(as.yearmon(as.character(final_data$svcg_cycle), "%Y%m"), frac = 0)
  #Creating Snapshot data from year 2010-01 to 2015-12
  #Removing all loan_id whose svcg_cycle ends before 01-01-2010
  myfun1 = function(x){final_data[-which(final_data$svcg_cycle < x) ,]}
  DATE1 = as.Date("2009-12-01")
  if(length(which(final_data$svcg_cycle < DATE1 ))>0){
    fd = myfun1(DATE1)
  } else{
    fd = final_data
  }
  
  #Removing all loan_ids whose svcg_cycle starts or has performance after 2016-01-01 
  DATE2 = as.Date("2016-01-01")
  myfun2 = function(x){fd[-which(fd$svcg_cycle >= x) ,]}
  fd = myfun2(DATE2)
  
  #Taking the transpose of data 
  test1 = fd[,c('id_loan','svcg_cycle','delq_sts','cd_zero_bal')]
  test2 = reshape(test1,idvar = "id_loan",timevar = "svcg_cycle",direction = "wide")
  
  test2 = as.data.frame(test2)
  
  #Adding col. del_status using first month informaion i.e. 2010-01 to the dataset
  test2 = add_column(test2, Del_status = test2$`delq_sts.2010-01-01`, .after = "id_loan")
  test2$Del_status = ifelse(test2$Del_status == "R","-1",test2$Del_status)
  test2$Del_status = as.numeric(test2$Del_status)
  test2$Del_status = ifelse(test2$Del_status == 0 ,"0-30",ifelse(test2$Del_status >=3,"D",test2$Del_status))
  test2$Del_status = ifelse(test2$Del_status == 1,"30-59",ifelse(test2$Del_status == 2,"60-89",test2$Del_status))
  test2$Del_status = ifelse(test2$Del_status == -1,"D",test2$Del_status)
  
  #Extracting variables from origination file 
  origfile2 = origfile[,c('fico','cnt_units','occpy_sts','cltv','dti','ltv','int_rt','channel','prop_type','id_loan','loan_purpose','orig_loan_term')]
  
  if(k==1){
    master_data = test2
    b_var = origfile2
  } else{
    master_data = rbind(master_data,test2)
    b_var = rbind(b_var,origfile2)
  }
  
  #Tracking code progress 
  tmp = paste(round((k/num_files)*100,2),"% Complete")
  print(tmp)
  
}
Sys.time() - a1
write.csv(master_data,"master_data_fv2.csv",row.names = FALSE)
write.csv(b_var,"origination_var.csv",row.names = FALSE)
#clear environment and memory 
rm(list=ls()) 
gc()

#********************Tracking No. of Default for creating Model development and validation data**********************************************

data1 = fread("master_data_fv2.csv")
#Taking 1/5th sample of master data to reduce the data size 
data1 = data1[sample(nrow(data1), nrow(data1)/5), ]
data1 = as.data.frame(data1)
data1 = data1[,-(which(colnames(data1)=="Del_status"))]#adjust these column according to data 
result = as.data.frame(matrix(nrow=0,ncol = 4))
result1 = c()
result2 = c()
result3 = c()

colnames(result) = c("Date","id_loan","def_flag","dpd")

loan11=c()
b1=Sys.time()
for(k in 1:62){#Since there are total of 62 months  
  default=c()
  loan1=c()
  default_r = c()
  loan1_r = c()
  if(length(loan11)>0){
    data1=data1[-sort(c(loan11,d11)),]
  }else{
    data1=data1
  }
  
  data1[,2*k] = ifelse(data1[,2*k] == "R",-1,data1[,2*k])
  data1[,2*k] = as.numeric(data1[,2*k])
  data1[,2*k] = ifelse(data1[,2*k] >= 3,3,data1[,2*k])
  data1[,2*k] = ifelse(data1[,2*k] == -1,3,data1[,2*k])
  
  data11=data1[,c(1,(2*k):(25+2*(k-1)))]
  result = result[0,]
  l1=nrow(data11)
  for( i in 1:l1){
    result[i,] = c(rep(0,4))
    k1=data11[i,seq(2,by=2,length.out=12)]>=3|data11[i,seq(2,by=2,length.out=12)]== "R"
    if(sum(k1,na.rm=TRUE)==0){
      default[i]=0
    }else{
      default[i]=1
    }
    
    n1=data11[i,seq(3,by=2,length.out = 12)]==1#Tracking cd_zero bal code for prepaid and default
    if(sum(n1,na.rm=TRUE)>0){                  #1 = prepaid and 3,6,9 is for default
      loan1[i]=data11$id_loan[i]
      default[i]="prepaid"
    }else{
      loan1[i]=NA
    }
    n1=data11[i,seq(3,by=2,length.out = 12)]==3|data11[i,seq(3,by=2,length.out = 12)]==6|data11[i,seq(3,by=2,length.out = 12)]==9
    if(default[i] ==0){
      if(sum(n1,na.rm=TRUE)>0){
        default[i]=1
      }
    }
    #breakup for defaulted account 
    if(default[i] == 1){
      result$id_loan[i] = data11$id_loan[i]
      result$def_flag[i] = 1
      if(!(is.na(data1[i,2*k]))){
        result$dpd[i] = data1[i,2*k]
      }
    }
    else{
      result$id_loan[i] = data11$id_loan[i]
      result$def_flag[i] = 0
      if(!(is.na(data1[i,2*k]))){
        result$dpd[i] = data1[i,2*k]
      }
    }
    result$Date = substring(colnames(data11)[2],10,16)
    
  }
  #Creating development sample data by(2010-01 + 4i)
  for(j in 1:16){
    if(k>1 & k == 4*j-2){
      result1 = rbind(result1,result)
    }
  }
  #Creating intime validation_1 sample data by(2010-02 + 4i)
  for(j in 1:16){
    if(k>1 & k == 4*j-1){
      result2 = rbind(result2,result)
    }
  }
  #Creating intime validation_2 sample data by(2010-04 + 4i)
  for(j in 1:16){
    if(k>1 & k == 4*j+1){
      result3 = rbind(result3,result)
    }
  }
  
  #Removing Default and prepaid loan from first month of performance window
  
  jj = lapply(1:nrow(data11), function(i) data11[i,2] == 3)
  a = lapply(1:length(jj), function(i) sum(jj[[i]],na.rm = T))
  
  default_r = c()
  for( i in 1:length(a)){
    if(a[i]==0)
      default_r[i]= 0
    else
      default_r[i] = 1
  }
  
  nn = lapply(1:nrow(data11), function(i) data11[i,3]==1)
  a1 = lapply(1:length(nn), function(i) sum(nn[[i]],na.rm = T))
  
  loan1_r = c()
  for (i in 1:length(a1)) {
    if(a1[i]>0){
      loan1_r[i]=as.character(data11$id_loan[i])
      default_r[i]="prepaid"
    }else{
      loan1_r[i]=NA
    }
  }
  
  nn = lapply(1:nrow(data11), function(i) data11[i,3]==3|data11[i,3]==6|data11[i,3]==9)
  a1 = lapply(1:length(nn), function(i) sum(nn[[i]],na.rm = T))
  
  for(i in 1:length(a1)){
    if(a1[i]>0)
      default_r[i] = 1
  }
  d11=which(default_r==1)
  loan11=which(!(is.na(loan1_r)))
  
  #Tracking code progress 
  tmp = paste(round((k/62)*100,2),"% Complete")
  print(tmp)
  
}
Sys.time()-b1
write.csv(result1,"pd_data_v1.csv",row.names = FALSE)#Development dataset
write.csv(result2,"pd_data_v1_1.csv",row.names = FALSE)#Intime validation data_1
write.csv(result3,"pd_data_v1_2.csv",row.names = FALSE)#Intime validation data_2

#clear environment and memory 
rm(list=ls()) 
gc()

#*****Read development pd_data******

master_data = fread("pd_data_fv1.csv")
orig_var = fread("origination_var.csv")
master_data = merge(master_data,orig_var,by = "id_loan")
master_data = as.data.frame(master_data)

# converting character categorical variables to numeric 
master_data$channel = ifelse(master_data$channel == "B",1,ifelse(master_data$channel == "C",2,
                                                                 ifelse(master_data$channel == "R",3,
                                                                        ifelse(master_data$channel == "T",4,master_data$channel))))
master_data$occpy_sts = ifelse(master_data$occpy_sts == "I",1,ifelse(master_data$occpy_sts == "P",2,
                                                                     ifelse(master_data$occpy_sts == "S",3,master_data$occpy_sts)))

master_data$prop_type = ifelse(master_data$prop_type == "CO",1,ifelse(master_data$prop_type == "CP",2,
                                                                      ifelse(master_data$prop_type == "MH",3,
                                                                             ifelse(master_data$prop_type == "PU",4,
                                                                                    ifelse(master_data$prop_type == "SF",5,
                                                                                           ifelse(master_data$prop_type == "99",6,master_data$prop_type))))))

master_data$loan_purpose = ifelse(master_data$loan_purpose == "C",1,ifelse(master_data$loan_purpose == "N",2,
                                                                           ifelse(master_data$loan_purpose == "P",3,master_data$occpy_sts)))


master_data$channel = as.numeric(master_data$channel)
master_data$occpy_sts = as.numeric(master_data$occpy_sts)
master_data$prop_type = as.numeric(master_data$prop_type)
master_data$loan_purpose = as.numeric(master_data$loan_purpose)


#subseting master data into 3 dataset based on dpd  

data_dpd0 = subset(master_data,master_data$dpd == 0)
data_dpd1 = subset(master_data,master_data$dpd == 1)
data_dpd2 = subset(master_data,master_data$dpd == 2)

#droping date and loan id's from all data 

data_dpd0 = data_dpd0[,-c(1,2)]
data_dpd1 = data_dpd1[,-c(1,2)]
data_dpd2 = data_dpd2[,-c(1,2)]


data_dpd0 = data_dpd0[,-which(colnames(data_dpd0) == "dpd")]
data_dpd1 = data_dpd1[,-which(colnames(data_dpd1) == "dpd")]
data_dpd2 = data_dpd2[,-which(colnames(data_dpd2) == "dpd")]

# Multicollinearity check for dpd0 data
data_dpd0 <- sapply(data_dpd0,as.numeric)
data_dpd0 <- as.data.frame(data_dpd0)
corrMat <- cor(data_dpd0[,2:ncol(data_dpd0)])
temp = colnames(corrMat)[findCorrelation(corrMat,cutoff = 0.6)]

#selecting variable based on cor

new_data <- data_dpd0[,-which(colnames(data_dpd0) == temp)]
names(new_data)

#***************** Model Development based on information value and woe ********************

library(Information)
iv <- create_infotables(data = new_data, y = "def_flag")
iv

#  Plot IV

plotFrame <- iv$Summary[order(-iv$Summary$IV), ]
plotFrame$Variable <- factor(plotFrame$Variable,levels = plotFrame$Variable[order(-plotFrame$IV)])

ggplot(plotFrame, aes(x = Variable, y = IV)) + geom_bar(width = .35, stat = "identity", color = "darkblue", fill = "white") +
  ggtitle("Information_Value") + theme_bw() + theme(plot.title = element_text(size = 10)) +
  theme(axis.text.x = element_text(angle = 90))

MultiPlot(information_object = iv,variables = iv$Summary$Variable,same_scales = T)

#WOE calculation
library(woeBinning)
pred_vars <- new_data[,-1]

bins <- woe.binning(df = new_data,target.var = "def_flag",pred.var = pred_vars,min.perc.total = 0.10,min.perc.class = 0.05)
bins

woeTable <- woe.binning.table(bins)
woe_deploy <- woe.binning.deploy(df = new_data,binning = bins,min.iv.total = 0.025,add.woe.or.dum.var = "woe")
head(woe_deploy)
summary(woe_deploy)
woe.binning.plot(binning = bins,multiple.plots = F)
names(woe_deploy)
woe_binned_vars <- woe_deploy[,c("def_flag","woe.int_rt.binned","woe.fico.binned","woe.ltv.binned","woe.dti.binned","woe.channel.binned")]
woe_binned_vars$def_flag <- factor(woe_binned_vars$def_flag) 
#correlation amoug woe binned variables
corwoeVars <- cor(woe_binned_vars[,-1])
#checking proportion of zero and one 
prop.table( table(woe_binned_vars$def_flag))

#Dividing data into train and test 
new_data1 = woe_binned_vars[which(woe_binned_vars$def_flag == 0),]
new_data2 = woe_binned_vars[which(woe_binned_vars$def_flag == 1),]
l1 = nrow(new_data1)
l2 = nrow(new_data2)
p1 = createDataPartition(new_data1$woe.int_rt.binned,p = 0.63)#taking this value based on 
p2 = createDataPartition(new_data2$woe.int_rt.binned,p = 0.90)#zero and one proportion 
train1 = new_data1[p1$Resample1,]
train2 = new_data2[p2$Resample1,]
test1 = new_data1[seq(1:nrow(new_data1))[-(p1$Resample1)],]
test2 = new_data2[seq(1:nrow(new_data2))[-(p2$Resample1)],]
train_f = rbind(train1,train2)
test_f = rbind(test1,test2)

#model development 
model <- glm(def_flag ~ ., family = binomial(logit), train_f)
summary_glm <- summary(model)
# p-value and pseudo r squared 
list( summary_glm$coefficient, 
      round( 1 - ( summary_glm$deviance / summary_glm$null.deviance ), 2 ) )

train_f$prediction <- predict( model, newdata = train_f, type = "response" )
test_f$prediction  <- predict( model, newdata = test_f , type = "response" )

#Confusion Matrix
cutoff <- quantile(train_f$prediction ,0.68 ,na.rm = T ) 
p_cutoff <- ifelse(train_f$prediction > cutoff, 1,0)
t_conf <-  table(train_f$def_flag,p_cutoff)
t_conf
accuracy_model <- sum(diag(t_conf))/nrow(train_f)
accuracy_model
sensitivity_model <- t_conf[,2][[2]]/(t_conf[,2][[2]] + t_conf[,1][[2]])
sensitivity_model
specificity_model <- t_conf[,1][[1]]/(t_conf[,1][[1]] + t_conf[,2][[1]])
specificity_model
#******Model Testing******* 
library(pROC)
ROC_logit <- roc(train_f$def_flag,train_f$prediction)
plot(ROC_logit)
auc(ROC_logit)

# gini 
library(concordance)

ginicoef <- 2*auc(ROC_logit) - 1

#KS statistic, max difference between cumulative good and cumulative bad
pred <- prediction(predictions = train_f$prediction,train_f$def_flag)
perf <- ROCR::performance(pred,"tpr","fpr")
ks <-max(attr(perf,'y.values')[[1]]- attr(perf,'x.values')[[1]])

#***********Predicting Monthly Score using above model*******************************************

data1 = read.csv("master_data_fv2.csv")
data1 = data1[,-(which(colnames(data1)=="Del_status"))]#adjust these column according to data 
orig_var = fread("origination_var.csv")
data1 = as.data.frame(data1)
orig_var = as.data.frame(orig_var)

#Moving id_loan to first column
orig_var <- subset(orig_var, select=c(id_loan,fico:prop_type,loan_purpose,orig_loan_term))
# converting character categorical variables to numeric 
orig_var$channel = ifelse(orig_var$channel == "B",1,ifelse(orig_var$channel == "C",2,
                                                           ifelse(orig_var$channel == "R",3,
                                                                  ifelse(orig_var$channel == "T",4,orig_var$channel))))
orig_var$occpy_sts = ifelse(orig_var$occpy_sts == "I",1,ifelse(orig_var$occpy_sts == "P",2,
                                                               ifelse(orig_var$occpy_sts == "S",3,orig_var$occpy_sts)))

orig_var$prop_type = ifelse(orig_var$prop_type == "CO",1,ifelse(orig_var$prop_type == "CP",2,
                                                                ifelse(orig_var$prop_type == "MH",3,
                                                                       ifelse(orig_var$prop_type == "PU",4,
                                                                              ifelse(orig_var$prop_type == "SF",5,
                                                                                     ifelse(orig_var$prop_type == "99",6,orig_var$prop_type))))))

orig_var$loan_purpose = ifelse(orig_var$loan_purpose == "C",1,ifelse(orig_var$loan_purpose == "N",2,
                                                                     ifelse(orig_var$loan_purpose == "P",3,orig_var$occpy_sts)))

orig_var$channel = as.numeric(orig_var$channel)
orig_var$occpy_sts = as.numeric(orig_var$occpy_sts)
orig_var$prop_type = as.numeric(orig_var$prop_type)
orig_var$loan_purpose = as.numeric(orig_var$loan_purpose)

score = as.data.frame(matrix(nrow = 0,ncol = 2))
colnames(score) = c("Date","score_dpd0")

b1=Sys.time()
loan11=c()
for(k in 1:62){
  score[k,c(1:2)] = c(rep(0,2))
  if(length(loan11)>0){
    data1=data1[-sort(c(loan11,d11)),]
  }else{
    data1=data1
  }
  
  data11=data1[,c(1,(2*k):(25+2*(k-1)))]
  for(i in 1:12){
    data11[,2*i] = as.character(data11[,2*i])
    data11[,2*i] = ifelse(data11[,2*i] == "R" ,-1,data11[,2*i])
    data11[,2*i] = as.numeric(data11[,2*i])
  }
  
  jj = lapply(1:nrow(data11),function(i) data11[i,seq(2,by=2,length.out=12)]>=3|data11[i,seq(2,by=2,length.out=12)]== -1)
  a  = lapply(1:length(jj),function(i) sum(jj[[i]],na.rm = T))
  default = c()
  for( i in 1:length(a)){
    if(a[i]==0)
      default[i]= 0
    else
      default[i] = 1
  }
  
  nn = lapply(1:nrow(data11), function(i) data11[i,seq(3,by=2,length.out = 12)]==1)
  a1 = lapply(1:length(nn), function(i) sum(nn[[i]],na.rm = T))
  loan1 = c()
  for (i in 1:length(a1)) {
    if(a1[i]>0){
      loan1[i]=as.character(data11$id_loan[i])
      default[i]="prepaid"
    }else{
      loan1[i]=NA
    }
  }
  
  nn = lapply(1:nrow(data11), function(i) data11[i,seq(3,by=2,length.out = 12)]==3|data11[i,seq(3,by=2,length.out = 12)]==6|data11[i,seq(3,by=2,length.out = 12)]==9)
  a1 = lapply(1:length(nn), function(i) sum(nn[[i]],na.rm = T))
  for(i in 1:length(a1)){
    if(default[i] ==0){
      if(a[i]>0){
        default[i]=1
      }
    }
  }
  
  res = NULL
  res$Date = rep(substring(colnames(data11)[2],10,19),nrow(data11))
  res$id_loan = as.character(data1$id_loan)
  res$def_flag = default
  res$dpd = as.numeric(as.character(data11[,2]))
  res = as.data.frame(matrix(unlist(res),nrow = nrow(data11),ncol = length(res)))
  colnames(res) = c("Date","id_loan","def_flag","dpd")
  res = res[-which(res$def_flag == "prepaid"),]
  res$def_flag = as.factor(as.character(res$def_flag))
  
  #Removing Default and prepaid loan from first month of performance window
  
  jj = lapply(1:nrow(data11), function(i) data11[i,2] >= 3 | data11[i,2] == -1)
  a = lapply(1:length(jj), function(i) sum(jj[[i]],na.rm = T))
  
  default_r = c()
  for( i in 1:length(a)){
    if(a[i]==0)
      default_r[i]= 0
    else
      default_r[i] = 1
  }
  
  nn = lapply(1:nrow(data11), function(i) data11[i,3]==1)
  a1 = lapply(1:length(nn), function(i) sum(nn[[i]],na.rm = T))
  
  loan1_r = c()
  for (i in 1:length(a1)) {
    if(a1[i]>0){
      loan1_r[i]=as.character(data11$id_loan[i])
      default_r[i]="prepaid"
    }else{
      loan1_r[i]=NA
    }
  }
  
  nn = lapply(1:nrow(data11), function(i) data11[i,3]==3|data11[i,3]==6|data11[i,3]==9)
  a1 = lapply(1:length(nn), function(i) sum(nn[[i]],na.rm = T))
  
  for(i in 1:length(a1)){
    if(a1[i]>0)
      default_r[i] = 1
  }
  d11=which(default_r==1)
  loan11=which(!(is.na(loan1_r)))
  
  score[k,1] = substring(colnames(data11)[2],10,19)
  #predicting monthly score and taking average 
  pred_dpd0 = subset(res,res$dpd == 0)
  pred_dpd0 = merge(pred_dpd0,orig_var,by = "id_loan")
  pred_dpd0 = subset(pred_dpd0,select = -c(id_loan,Date,dpd))
  pred_vars <- pred_dpd0[,-which(colnames(pred_dpd0) == "def_flag")]
  bins <- woe.binning(df = pred_dpd0,target.var = "def_flag",pred.var = pred_vars,min.perc.total = 0.10,min.perc.class = 0.05)
  woeTable <- woe.binning.table(bins)
  woe_deploy <- woe.binning.deploy(df = pred_dpd0,binning = bins,min.iv.total = 0.02,add.woe.or.dum.var = "woe")
  woe_binned_vars <- woe_deploy[,c("def_flag","woe.fico.binned","woe.int_rt.binned","woe.ltv.binned","woe.dti.binned","woe.channel.binned")]
  pred_dpd0$prediction <- predict( model, newdata = woe_binned_vars, type = "response" )
  score[k,2] <- mean(pred_dpd0$prediction)
  
  #Tracking code progress 
  tmp = paste(round((k/62)*100,2),"% Complete")
  print(tmp)
  
}
write.csv(score,"Basel_PD_score.csv",row.names = F)
Sys.time()-b1

#***********Forecasting PD_Score after 2015-01 till 2017-09*****************************
data1 = fread("data_after15.csv")
orig_var = fread("orig_var_after15.csv")
data1 = as.data.frame(data1)
orig_var = as.data.frame(orig_var)

#Moving id_loan to first column
orig_var <- subset(orig_var, select=c(id_loan,fico:prop_type,loan_purpose,orig_loan_term))
# converting character categorical variables to numeric 
orig_var$channel = ifelse(orig_var$channel == "B",1,ifelse(orig_var$channel == "C",2,
                                                           ifelse(orig_var$channel == "R",3,
                                                                  ifelse(orig_var$channel == "T",4,orig_var$channel))))
orig_var$occpy_sts = ifelse(orig_var$occpy_sts == "I",1,ifelse(orig_var$occpy_sts == "P",2,
                                                               ifelse(orig_var$occpy_sts == "S",3,orig_var$occpy_sts)))

orig_var$prop_type = ifelse(orig_var$prop_type == "CO",1,ifelse(orig_var$prop_type == "CP",2,
                                                                ifelse(orig_var$prop_type == "MH",3,
                                                                       ifelse(orig_var$prop_type == "PU",4,
                                                                              ifelse(orig_var$prop_type == "SF",5,
                                                                                     ifelse(orig_var$prop_type == "99",6,orig_var$prop_type))))))

orig_var$loan_purpose = ifelse(orig_var$loan_purpose == "C",1,ifelse(orig_var$loan_purpose == "N",2,
                                                                     ifelse(orig_var$loan_purpose == "P",3,orig_var$occpy_sts)))

orig_var$channel = as.numeric(orig_var$channel)
orig_var$occpy_sts = as.numeric(orig_var$occpy_sts)
orig_var$prop_type = as.numeric(orig_var$prop_type)
orig_var$loan_purpose = as.numeric(orig_var$loan_purpose)

score = as.data.frame(matrix(nrow = 0,ncol = 2))
colnames(score) = c("Date","fscore_dpd0")

b1=Sys.time()
loan11=c()
for(k in 1:32){
  score[k,c(1:2)] = c(rep(0,2))
  if(length(loan11)>0){
    data1=data1[-sort(c(loan11,d11)),]
  }else{
    data1=data1
  }
  
  data11=data1[,c(1,(2*k),(2*k+1))]
  data11[,2*k] = ifelse(data11[,2*k] == "R" ,-1,data11[,2*k])
  data11[,2*k] = as.numeric(data11[,2*k])
  
  
  res = NULL
  res$Date = rep(substring(colnames(data11)[2],10,19),nrow(data11))
  res$id_loan = as.character(data1$id_loan)
  res$dpd = as.numeric(as.character(data11[,2]))
  res = as.data.frame(matrix(unlist(res),nrow = nrow(data11),ncol = length(res)))
  colnames(res) = c("Date","id_loan","dpd")
  
  #Removing Default and prepaid loan from first month of performance window
  
  jj = lapply(1:nrow(data11), function(i) data11[i,2] >= 3 | data11[i,2] == -1)
  a = lapply(1:length(jj), function(i) sum(jj[[i]],na.rm = T))
  
  default_r = c()
  for( i in 1:length(a)){
    if(a[i]==0)
      default_r[i]= 0
    else
      default_r[i] = 1
  }
  
  nn = lapply(1:nrow(data11), function(i) data11[i,3]==1)
  a1 = lapply(1:length(nn), function(i) sum(nn[[i]],na.rm = T))
  
  loan1_r = c()
  for (i in 1:length(a1)) {
    if(a1[i]>0){
      loan1_r[i]=as.character(data11$id_loan[i])
      default_r[i]="prepaid"
    }else{
      loan1_r[i]=NA
    }
  }
  
  nn = lapply(1:nrow(data11), function(i) data11[i,3]==3|data11[i,3]==6|data11[i,3]==9)
  a1 = lapply(1:length(nn), function(i) sum(nn[[i]],na.rm = T))
  
  for(i in 1:length(a1)){
    if(a1[i]>0)
      default_r[i] = 1
  }
  d11=which(default_r==1)
  loan11=which(!(is.na(loan1_r)))
  
  score[k,1] = substring(colnames(data11)[2],10,19)
  #predicting monthly score and taking average 
  pred_dpd0 = subset(res,res$dpd == 0)
  pred_dpd0 = merge(pred_dpd0,orig_var,by = "id_loan")
  pred_dpd0 = pred_dpd0[,c("int_rt","fico","ltv","dti","channel")]
  #Creating bins and replacing raw values by woe
  pred_dpd0$woe.int_rt.binned = ifelse(pred_dpd0$int_rt <= 5.5,bins[,2][[1]][1,1],
                                       ifelse(pred_dpd0$int_rt > 5.5 & pred_dpd0$int_rt <= 5.875,bins[,2][[1]][2,1],
                                              ifelse(pred_dpd0$int_rt > 5.875,bins[,2][[1]][3,1],pred_dpd0$int_rt)))
  
  pred_dpd0$woe.fico.binned = ifelse(pred_dpd0$fico <= 724,bins[,2][[2]][1,1],
                                     ifelse(pred_dpd0$fico > 724 & pred_dpd0$fico <= 772,bins[,2][[2]][2,1],
                                            ifelse(pred_dpd0$fico > 772,bins[,2][[2]][3,1],pred_dpd0$fico)))
  
  pred_dpd0$woe.ltv.binned = ifelse(pred_dpd0$ltv <= 65,bins[,2][[3]][1,1],
                                    ifelse(pred_dpd0$ltv > 65 & pred_dpd0$ltv <= 80,bins[,2][[3]][2,1],
                                           ifelse(pred_dpd0$ltv > 80,bins[,2][[3]][3,1],pred_dpd0$ltv)))
  
  pred_dpd0$woe.dti.binned = ifelse(pred_dpd0$dti <= 27,bins[,2][[4]][1,1],
                                    ifelse(pred_dpd0$dti > 27 & pred_dpd0$dti <= 38,bins[,2][[4]][2,1],
                                           ifelse(pred_dpd0$dti > 38,bins[,2][[4]][3,1],pred_dpd0$dti))) 
  
  pred_dpd0$woe.channel.binned = ifelse(pred_dpd0$channel <= 2,bins[,2][[5]][1,1],
                                        ifelse(pred_dpd0$channel > 2 & pred_dpd0$channel <= 3,bins[,2][[5]][2,1],
                                               ifelse(pred_dpd0$channel > 3,bins[,2][[5]][3,1],pred_dpd0$channel)))
  
  pred_dpd0$forecasted <- predict( model, newdata = pred_dpd0, type = "response" )
  score[k,2] <- mean(pred_dpd0$forecasted)
  
  #Tracking code progress
  tmp = paste(round((k/32)*100,2),"% Complete")
  print(tmp)
  
}
Sys.time()-b1
write.csv(score,"Forcasted_avg_PD_score.csv",row.names = F)
#clear environment and memory
rm(list=ls())
gc()



#********************Calculating monthly default rate************************************* 
data1 = fread("master_data_fv2.csv")
data1 = as.data.frame(data1)
data1 = data1[,-(which(colnames(data1)=="Del_status"))]#adjust these column according to data 
result=as.data.frame(matrix(nrow=0,ncol=5))
result1 = as.data.frame(matrix(nrow=0,ncol = 11))
colnames(result)=c("snapshot_month","No_of_defaults","Tot_Acc","Default_rate","no_of_prepaid")
colnames(result1) = c("dpd.0","dpd.1","dpd.2","dpd.3","dpd.5","TA_dpd.0","TA_dpd.1","TA_dpd.2","TA_dpd.3","TA_dpd.5","def_rate0")

loan11=c()
a1=Sys.time()
for(k in 1:62){
  result1[k,]= c(rep(0,11))
  
  default=c()
  loan1=c()
  default_r = c()
  loan1_r = c()
  if(length(loan11)>0){
    data1=data1[-sort(c(loan11,d11)),]
  }else{
    data1=data1
  }
  
  data1[,2*k] = ifelse(data1[,2*k] == "R",-1,data1[,2*k])
  data1[,2*k] = as.numeric(data1[,2*k])
  data1[,2*k] = ifelse(data1[,2*k] >= 3,3,data1[,2*k])
  data1[,2*k] = ifelse(data1[,2*k] == -1,3,data1[,2*k])
  
  data11=data1[,c(1,(2*k):(25+2*(k-1)))]
  l1=nrow(data11)
  
  #Removing Default and prepaid loan from first month of performance window
  for( i in 1:l1){
    k1=data11[i,2] == 3
    if(sum(k1,na.rm=TRUE)==0){
      default_r[i]=0
    }else{
      default_r[i]=1
    }
    
    #breakup for total account
    if(!(is.na(data1[i,2*k]))){
      if(data1[i,2*k] == 0){
        result1$TA_dpd.0[k] = result1$TA_dpd.0[k] + 1
      }
      else if(data1[i,2*k] == 1){
        result1$TA_dpd.1[k] = result1$TA_dpd.1[k] + 1
      }
      else if(data1[i,2*k] == 2){
        result1$TA_dpd.2[k] = result1$TA_dpd.2[k] + 1
      }
      else if(data1[i,2*k] == 3){
        result1$TA_dpd.3[k] = result1$TA_dpd.3[k] + 1
      }
    }else{
      result1$TA_dpd.5[k] = result1$TA_dpd.5[k] + 1
    }
    
    n1=data11[i,3]==1
    if(sum(n1,na.rm=TRUE)>0){
      loan1_r[i]=data11$id_loan[i]
      default_r[i]="prepaid"
    }else{
      loan1_r[i]=NA
    }
    n1=data11[i,3]==3|data11[i,3]==6|data11[i,3]==9
    if(sum(n1,na.rm=TRUE)>0){
      default_r[i]=1
    }
  }
  #breakup for monthly default defaulted account
  if(k > 1){
    
    result1$dpd.0[k] = length(which(data1[which(default_r==1),(2*k-2)] == 0))
    result1$dpd.1[k] = length(which(data1[which(default_r==1),(2*k-2)] == 1))
    result1$dpd.2[k] = length(which(data1[which(default_r==1),(2*k-2)] == 2))
    result1$dpd.3[k] = length(which(data1[which(default_r==1),(2*k-2)] == 3))
    result1$dpd.5[k] = length(which(is.na(data1[which(default_r==1),(2*k-2)])))
    #dpd.5 is for N.A values 
  }
  result1$def_rate0[k] = result1$dpd.0[k]/result1$TA_dpd.0[k]
  d11=which(default_r==1)
  loan11=which(!(is.na(loan1_r)))
  #default1=sum(default==1,na.rm=TRUE)
  default1 = sum(default_r==1,na.rm=TRUE)
  prepaid = sum(default_r=="prepaid",na.rm=TRUE)
  #prepaid=sum(default=="prepaid",na.rm=TRUE)
  tot_acc=nrow(data11)
  rate=default1/tot_acc
  snapshot_month=substring(colnames(data11)[2],10,16)
  result=rbind(result,data.frame(snapshot_month=snapshot_month,No_of_defaults=default1,Tot_Acc=tot_acc,Default_rate=rate,no_of_prepaid=prepaid))
  
  #Tracking code progress 
  tmp = paste(round((k/62)*100,2),"% Complete")
  print(tmp)
  
}
Sys.time()-a1
final_result = cbind(result,result1)
write.csv(final_result,"monthly_def_rate_dpd.csv",row.names = FALSE)

#********************Calculating monthly default rate for data after 2015-01 for model forecasting************************************* 
data1 = fread("data_after15.csv")
data1 = as.data.frame(data1)
result=as.data.frame(matrix(nrow=0,ncol=5))
result1 = as.data.frame(matrix(nrow=0,ncol = 11))
colnames(result)=c("snapshot_month","No_of_defaults","Tot_Acc","Default_rate","no_of_prepaid")
colnames(result1) = c("dpd.0","dpd.1","dpd.2","dpd.3","dpd.5","TA_dpd.0","TA_dpd.1","TA_dpd.2","TA_dpd.3","TA_dpd.5","def_rate0")

loan11=c()
a1=Sys.time()
for(k in 1:32){
  result1[k,]= c(rep(0,11))
  
  default=c()
  loan1=c()
  default_r = c()
  loan1_r = c()
  if(length(loan11)>0){
    data1=data1[-sort(c(loan11,d11)),]
  }else{
    data1=data1
  }
  
  data11 = data1[,c(1,(2*k),(2*k+1))]
  data11[,2] = ifelse(data11[,2] == "R" ,-1,data11[,2])
  data11[,2] = as.numeric(data11[,2])
  l1=nrow(data11)
  
  #Removing Default and prepaid loan from first month of performance window
  
  for( i in 1:l1){
    k1=data11[i,2] == 3
    if(sum(k1,na.rm=TRUE)==0){
      default_r[i]=0
    }else{
      default_r[i]=1
    }
    
    #breakup for total account
    if(!(is.na(data1[i,2*k]))){
      if(data1[i,2*k] == 0){
        result1$TA_dpd.0[k] = result1$TA_dpd.0[k] + 1
      }
      else if(data1[i,2*k] == 1){
        result1$TA_dpd.1[k] = result1$TA_dpd.1[k] + 1
      }
      else if(data1[i,2*k] == 2){
        result1$TA_dpd.2[k] = result1$TA_dpd.2[k] + 1
      }
      else if(data1[i,2*k] == 3){
        result1$TA_dpd.3[k] = result1$TA_dpd.3[k] + 1
      }
    }else{
      result1$TA_dpd.5[k] = result1$TA_dpd.5[k] + 1
    }
    
    n1=data11[i,3]==1
    if(sum(n1,na.rm=TRUE)>0){
      loan1_r[i]=data11$id_loan[i]
      default_r[i]="prepaid"
    }else{
      loan1_r[i]=NA
    }
    n1=data11[i,3]==3|data11[i,3]==6|data11[i,3]==9
    if(sum(n1,na.rm=TRUE)>0){
      default_r[i]=1
    }
  }
  #breakup for monthly default defaulted account
  if(k > 1){
    
    result1$dpd.0[k] = length(which(data1[which(default_r==1),(2*k-2)] == 0))
    result1$dpd.1[k] = length(which(data1[which(default_r==1),(2*k-2)] == 1))
    result1$dpd.2[k] = length(which(data1[which(default_r==1),(2*k-2)] == 2))
    result1$dpd.3[k] = length(which(data1[which(default_r==1),(2*k-2)] == 3))
    result1$dpd.5[k] = length(which(is.na(data1[which(default_r==1),(2*k-2)])))
    #dpd.5 is for N.A values 
  }
  result1$def_rate0[k] = result1$dpd.0[k]/result1$TA_dpd.0[k]
  d11=which(default_r==1)
  loan11=which(!(is.na(loan1_r)))
  default1 = sum(default_r==1,na.rm=TRUE)
  prepaid = sum(default_r=="prepaid",na.rm=TRUE)
  tot_acc=nrow(data11)
  rate=default1/tot_acc
  snapshot_month=substring(colnames(data11)[2],10,16)
  result=rbind(result,data.frame(snapshot_month=snapshot_month,No_of_defaults=default1,Tot_Acc=tot_acc,Default_rate=rate,no_of_prepaid=prepaid))
  
  #Tracking code progress 
  tmp = paste(round((k/32)*100,2),"% Complete")
  print(tmp)
  
}
Sys.time()-a1
final_result = cbind(result,result1)
write.csv(final_result,"monthly_def_rate_after15.csv",row.names = FALSE)
#clear environment and memory 
rm(list=ls()) 
gc()

##**********Marginal Index model using ARIMAx**************************************

pd_score = read.csv("Basel_PD_score.csv")
def_rate = read.csv("monthly_def_rate_dpd.csv")
pd_score$Marginal_index = def_rate$dpd0_defR/pd_score$score_dpd0
pd_score = pd_score[-c(1,62),]

#Import the Macro Economic Data
Micro_data <- read.csv("Macrovariable_marginal.csv", header = TRUE, sep = ",")

pd_score$Date = as.character(pd_score$Date)
pd_score$temp = substr(pd_score$Date,1,4)
pd_score$temp = paste(pd_score$temp,substr(pd_score$Date,6,7),sep = "-")
pd_score$Date = pd_score$temp
pd_score = subset(pd_score,select = -temp)
marginal_index = merge(pd_score,Micro_data,by = "Date")
marginal_index = subset(marginal_index,select = -c(Date,score_dpd0,Scenario.Name.x,Scenario.Name.y))
#plot dependent variable 
plot(marginal_index$Marginal_index)
#stationarity test
adf.test(marginal_index$Marginal_index)#p value comming out to be 0.01 i.e test is passing 
#Correlation check between X and Y
corrMat <- abs(cor(marginal_index[,2:ncol(marginal_index)],marginal_index$Marginal_index))

#ststionarity test for all variables
l1=lapply(marginal_index,adf.test)
p1=c()
for(i in 1:ncol(marginal_index)){
  p1[i]=l1[[i]]$p.value
}
#taking correlation cutoff = 0.3 and selecting variables based on correlation 
marginal_index <- marginal_index[,c("Marginal_index",names(which(corrMat[,1]>=0.3)))]
#Multicollinearity check
corrMat <- abs(cor(marginal_index[2:ncol(marginal_index)]))
drop_var = findCorrelation(corrMat,cutoff = 0.6)
#droping valiables based on multicollinearity
marginal_index = marginal_index[,-(drop_var+1)]

#***********************ARIMAx model**********************************
#Outliers test
boxplot(marginal_index$Marginal_index)
#identifies and replaces outliers using series smoothing and decomposition.
count_ts = ts(marginal_index[, c('Marginal_index')])
#ts() command to create a time series object to pass to tsclean():
marginal_index$clean_index = tsclean(count_ts)
boxplot(marginal_index$clean_index)#rechecking outliers
#Autocorrelations and Choosing Model Order
Acf(marginal_index$clean_index, main='')
Pacf(marginal_index$clean_index, main='')
#dividing data into train and test
marginal_index = marginal_index[,-1]
#Moving clean_index to first column
marginal_index <- subset(marginal_index, select=c(clean_index,X10.year.Treasury.yield:Japan.bilateral.dollar.exchange.rate..yen.USD.))

train = marginal_index[1:50,]
test = marginal_index[51:nrow(marginal_index),]
#model
auto.arima(train$clean_index)
model = arima(train$clean_index,order = c(0,1,1),xreg = train[,c(2:ncol(train))])
fitted = predict(model,newxreg = train[,c(2:ncol(train))])
pred <- predict (model, newxreg=test[,c(2:ncol(test))])
accuracy(test$clean_index,pred$pred)

#To increase image margin
par("mar")#first test this 
par(mar=c(1,1,1,1))# then change it to this 
plot(residuals(model))

#test
acf(model$residuals)
boxresult<-LjungBoxTest(model$residuals,k=2,StartLag=1)
plot(boxresult[,3],main= "Ljung-Box Q Test", ylab= "P-values", xlab= "Lag")
#Normality test
qqnorm(model$residuals)
qqline(model$residuals)
#Shapiro-wilk normality test
shapiro.test(model$residuals)
Box.test(model$residuals,type="Ljung",lag=1,fitdf=0)
Box.test(model$residuals,lag=1,fitdf=0)
#********Model Residual vs Fitted value plot**************
plot(as.numeric(model$residuals),as.numeric(fitted$pred))

#*****************Marginal index forecast for next two years***************
futurVal <- forecast.Arima(model,h=24, level=c(99.5),xreg = )
plot.forecast(futurVal)



















