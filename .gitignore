# Setting the work directory and extracting data
setwd("D:/CECL\\New_model")
# install.packages("data.table")
library(data.table)
library(Hmisc)
library(modeest)
library(forecast)
library(zoo)
library(ROCR)
library(grid)
library(MASS)
library(tseries)
library(caret)

pd_score = read.csv("Basel_PD_score.csv")
def_rate = read.csv("monthly_def_rate_dpd.csv")
pd_score$Marginal_index = def_rate$dpd0_defR/pd_score$score_dpd0
pd_score = pd_score[-c(1,62),]

#Import the Macro Economic Data
Micro_data <- read.csv("Macrovariable_marginal.csv", header = TRUE, sep = ",")
Micro_data <- Micro_data[,-c(2,18)]

pd_score$Date = as.character(pd_score$Date)
pd_score$temp = substr(pd_score$Date,1,4)
pd_score$temp = paste(pd_score$temp,substr(pd_score$Date,6,7),sep = "-")
pd_score$Date = pd_score$temp
pd_score = pd_score[,-4]
marginal_index = merge(pd_score,Micro_data,by = "Date")
marginal_index = marginal_index[,-c(1,2,19)]
#plot dependent variable 
plot(marginal_index$Marginal_index,line)
#stationarity test
adf.test(marginal_index$Marginal_index)#p value comming out to be 0.01 i.e test is passing 
#Correlation check between X and Y
corrMat <- abs(cor(marginal_index[,2:ncol(marginal_index)],marginal_index$Marginal_index))

#ststionarity test
l1=lapply(marginal_index,adf.test)
p1=c()
for(i in 1:ncol(marginal_index)){
  p1[i]=l1[[i]]$p.value
}
#taking correlation cutoff = 0.3 and selecting variables based on correlation 
new_data <- marginal_index[,c(1,6,11,10,14,15,16,20,24,26)]

#Multicolinearity check
corrMat <- abs(cor(new_data[2:ncol(new_data)]))
findCorrelation(corrMat,cutoff = 0.6)

new_data = new_data[,-c(2,5,3,7,8)]
#Dividing data into train and test
train = new_data[1:42,]
test = new_data[43:nrow(new_data),]
# Model Development
model1 = stepAIC(lm(Marginal_index~.,data = train))
model1$anova
model2 = lm(Marginal_index~X10.year.Treasury.yield,data = train)
#***************Since all variables are not stationary, doing variable transformation 
new_data = marginal_index
#creating log variable
k1=ncol(new_data)
#creating quarter over quarter variables
k1=ncol(cc)
for(j in 3:30){
  for(i in 1:nrow(cc)){
    cc[(i+1),(k1-2+j)]=(cc[(i+1),j]-cc[i,j])*100/cc[i,j]
    
  }
  colnames(cc)[(k1-2+j)]=paste("qoq.",colnames(cc)[j],"",sep="")
}

#creating year over year variables
k1=ncol(cc)
for(j in 3:30){
  for(i in 1:nrow(cc)){
    cc[(i+4),(k1-2+j)]=(cc[(i+4),j]-cc[i,j])*100/cc[i,j]
    
  }
  colnames(cc)[(k1-2+j)]=paste("yoy.",colnames(cc)[j],"",sep="")
}

#creating 1 quarter lagged variables
k=ncol(cc)
for(j in 3:k){
  cc[,(k-2+j)]=Lag(cc[,j],1)
  colnames(cc)[(k-2+j)]=paste("1ql.",colnames(cc)[j],"",sep="")
}

#creating 2 quarter lagged variables
k1=ncol(cc)
for(j in 3:k){
  cc[,(k1-2+j)]=Lag(cc[,j],2)
  colnames(cc)[(k1-2+j)]=paste("2ql.",colnames(cc)[j],"",sep="")
}
#creating 3 quarter lagged variables
k1=ncol(cc)
for(j in 3:k){
  cc[,(k1-2+j)]=Lag(cc[,j],3)
  colnames(cc)[(k1-2+j)]=paste("3ql.",colnames(cc)[j],"",sep="")
}
#creating yearly lagged variables
k1=ncol(cc)
for(j in 3:k){
  cc[,(k1-2+j)]=Lag(cc[,j],4)
  colnames(cc)[(k1-2+j)]=paste("4ql.",colnames(cc)[j],"",sep="")
}












 





