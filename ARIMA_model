# Setting the work directory and extracting data
setwd("D:/CECL\\New_model")
# install.packages("data.table")
library("data.table")
library(rlang)
library(Hmisc)
library(modeest)
library(forecast)
library(zoo)
library(tibble)
library(corrplot)
library(caret)
library(purrr)
library(ROCR)
library(grid)
library(broom)
library(tidyr)
library(dplyr)
library(scales)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(MASS)
library(car)
library(lmtest)
library(FitAR)
library(tseries)

##**********Marginal Index model using ARIMAx**************************************

pd_score = read.csv("Basel_PD_score.csv")
def_rate = read.csv("monthly_def_rate_dpd.csv")
pd_score$Marginal_index = def_rate$dpd0_defR/pd_score$score_dpd0
pd_score = pd_score[-c(1,62),]

#Import the Macro Economic Data
Micro_data <- read.csv("Macrovariable_marginal.csv", header = TRUE, sep = ",")

pd_score$Date = as.character(pd_score$Date)
pd_score$temp = substr(pd_score$Date,1,4)
pd_score$temp = paste(pd_score$temp,substr(pd_score$Date,6,7),sep = "-")
pd_score$Date = pd_score$temp
pd_score = subset(pd_score,select = -temp)
marginal_index = merge(pd_score,Micro_data,by = "Date")
marginal_index = subset(marginal_index,select = -c(Date,score_dpd0,Scenario.Name.x,Scenario.Name.y))
#plot dependent variable 
plot(marginal_index$Marginal_index)
#stationarity test
adf.test(marginal_index$Marginal_index)#p value comming out to be 0.01 i.e test is passing 
#Correlation check between X and Y
corrMat <- abs(cor(marginal_index[,2:ncol(marginal_index)],marginal_index$Marginal_index))

#ststionarity test for all variables
l1=lapply(marginal_index,adf.test)
p1=c()
for(i in 1:ncol(marginal_index)){
  p1[i]=l1[[i]]$p.value
}
#taking correlation cutoff = 0.3 and selecting variables based on correlation 
marginal_index <- marginal_index[,c("Marginal_index",names(which(corrMat[,1]>=0.3)))]
#Multicollinearity check
corrMat <- abs(cor(marginal_index[2:ncol(marginal_index)]))
drop_var = findCorrelation(corrMat,cutoff = 0.6)
#droping valiables based on multicollinearity
marginal_index = marginal_index[,-(drop_var+1)]

#***********************ARIMAx model**********************************
#Outliers test
boxplot(marginal_index$Marginal_index)
#identifies and replaces outliers using series smoothing and decomposition.
count_ts = ts(marginal_index[, c('Marginal_index')])
#ts() command to create a time series object to pass to tsclean():
marginal_index$clean_index = tsclean(count_ts)
boxplot(marginal_index$clean_index)#rechecking outliers
#Autocorrelations and Choosing Model Order
Acf(marginal_index$clean_index, main='')
Pacf(marginal_index$clean_index, main='')
#dividing data into train and test
marginal_index = marginal_index[,-1]
#Moving clean_index to first column
marginal_index <- subset(marginal_index, select=c(clean_index,X10.year.Treasury.yield:Japan.bilateral.dollar.exchange.rate..yen.USD.))

train = marginal_index[1:50,]
test = marginal_index[51:nrow(marginal_index),]
#model
auto.arima(train$clean_index)
model = arima(train$clean_index,order = c(0,1,1),xreg = train[,c(2:ncol(train))])
fitted = predict(model,newxreg = train[,c(2:ncol(train))])
pred <- predict (model, newxreg=test[,c(2:ncol(test))])
accuracy(test$clean_index,pred$pred)

#To increase image margin
par("mar")#first test this 
par(mar=c(1,1,1,1))# then change it to this 
plot(residuals(model))

#test
acf(model$residuals)
boxresult<-LjungBoxTest(model$residuals,k=2,StartLag=1)
plot(boxresult[,3],main= "Ljung-Box Q Test", ylab= "P-values", xlab= "Lag")
#Normality test
qqnorm(model$residuals)
qqline(model$residuals)
#Shapiro-wilk normality test
shapiro.test(model$residuals)
Box.test(model$residuals,type="Ljung",lag=1,fitdf=0)
Box.test(model$residuals,lag=1,fitdf=0)
#********Model Residual vs Fitted value plot**************
plot(as.numeric(model$residuals),as.numeric(fitted$pred))

#*****************Marginal index forecast for next two years***************
futurVal <- forecast.Arima(model,h=24, level=c(99.5),xreg = )
plot.forecast(futurVal)










 





